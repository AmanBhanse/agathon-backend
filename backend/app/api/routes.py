from fastapi import APIRouter, HTTPException, Query
from app.services.excel_service import excel_service
from app.services.openai_service import openai_service
from app.models.schemas import (
    FallnummerResponse, ExcelInfoResponse, ErrorResponse,
    CombinedReportRequest, CombinedReportResponse
)
from typing import Optional
from datetime import datetime

router = APIRouter()


@router.get("/fallnummer/{fallnummer}", response_model=FallnummerResponse)
async def get_fallnummer_data(fallnummer: str):
    """
    Get all data for a specific Fallnummer from the Excel file
    """
    try:
        data = excel_service.get_data_by_fallnummer(fallnummer)
        if data is None:
            raise HTTPException(
                status_code=404,
                detail=f"No data found for Fallnummer: {fallnummer}"
            )

        return FallnummerResponse(
            fallnummer=fallnummer,
            data=data,
            message="Data retrieved successfully"
        )

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error retrieving data: {str(e)}"
        )


@router.get("/fallnummer", response_model=FallnummerResponse)
async def get_fallnummer_data_query(fallnummer: str = Query(..., description="The Fallnummer to search for")):
    """
    Get all data for a specific Fallnummer using query parameter
    """
    try:
        data = excel_service.get_data_by_fallnummer(fallnummer)

        if data is None:
            raise HTTPException(
                status_code=404,
                detail=f"No data found for Fallnummer: {fallnummer}"
            )

        return FallnummerResponse(
            fallnummer=fallnummer,
            data=data,
            message="Data retrieved successfully"
        )

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error retrieving data: {str(e)}"
        )


@router.get("/excel/info", response_model=ExcelInfoResponse)
async def get_excel_info():
    """
    Get information about the Excel file (columns, available Fallnummers, etc.)
    """
    try:
        columns = excel_service.get_columns()
        fallnummers = excel_service.get_all_fallnummers()

        return ExcelInfoResponse(
            total_records=len(fallnummers),
            columns=columns,
            available_fallnummers=fallnummers[:10]  # Limit to first 10 for display
        )

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error getting Excel info: {str(e)}"
        )


@router.get("/excel/fallnummers")
async def get_all_fallnummers():
    """
    Get all available Fallnummers
    """
    try:
        fallnummers = excel_service.get_all_fallnummers()
        return {
            "fallnummers": fallnummers,
            "total_count": len(fallnummers)
        }

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error getting Fallnummers: {str(e)}"
        )


@router.post("/getCombinedReport", response_model=CombinedReportResponse)
async def get_combined_report(request: CombinedReportRequest):
    """
    Generate a combined clinical report using Azure OpenAI for a tumor board case.
    
    Request body should contain:
    - fallnummer: The case number
    - data: Patient data dictionary with case information
    
    Returns:
    - Clinical report summary generated by AI
    """
    try:
        if not request.fallnummer or not request.data:
            raise HTTPException(
                status_code=400,
                detail="Both fallnummer and data are required"
            )
        
        # Generate clinical report using OpenAI
        clinical_report = openai_service.generate_clinical_report(request.data)
        
        return CombinedReportResponse(
            fallnummer=request.fallnummer,
            clinical_report=clinical_report,
            timestamp=datetime.now().isoformat(),
            message="Report generated successfully"
        )
    
    except HTTPException as he:
        raise he
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error generating report: {str(e)}"
        )
